
/*

Buffer A handles the user interactions, storing persistent state in individual pixels
For everything related to the Roving Capsules algorithm, see the main "Image" buffer/tab.

// function of each colum of buf A
const int GROUP_MOUSE  = 0; // row 0: mouse pos; row 1:(isSelection, selectedId)
const int GROUP_CAM    = 1; // row 0: lookat; row 1: (azimuth, declination, look-dist, image-dist)
const int GROUP_POINT2 = 2; // row x: point x pos in 2d screen coords (vec3 x,y,distance)
const int GROUP_POINT3 = 3; // row x: point x pos in 3d world  coords (vec4 x,y,z,radius)
const int GROUP_END    = 4; // last group 

*/

void mainImage( out vec4 color, in vec2 fuv ) {
    ivec2 iuv = ivec2(fuv);
    int group = iuv.x >> pxl;
    int item  = iuv.y >> pxl;
    
    color = vec4(0);

    if (group >= GROUP_END) { /* color = vec4(1,0,1,0); */ return; } // skip unused
    
    vec2 uv      = fuv / iResolution.xy; // normalized coords
    color        = texture(iChannel0, uv); // carry prev state to next frame
    float aspect = iResolution.x / iResolution.y;

    // read mouse
    vec4 oldMouse       = texelFetch(iChannel0, ivec2(GROUP_MOUSE << pxl, 0 << pxl), 0);
    vec4 mouse          = iMouse;
    bool oldMouseDown   = oldMouse.z > 0.;
    bool mouseDown      = iMouse.z > 0.;
    vec2 mouseScreen    = pixelToScreen(mouse.xy, iResolution.xy);
    vec2 oldMouseScreen = pixelToScreen(oldMouse.xy, iResolution.xy);
    bool mouseClicked   = (mouseDown && !oldMouseDown);
    bool mouseReleased  = (!mouseDown && oldMouseDown);
    vec2 mouseDelta     = (mouseClicked) ? vec2(0) : mouseScreen.xy - oldMouseScreen.xy;
    
    // read kbd
    bool aDown = texelFetch(iChannel1, ivec2(key_a, 0), 0).x > 0.;
    bool dDown = texelFetch(iChannel1, ivec2(key_d, 0), 0).x > 0.;
    bool eDown = texelFetch(iChannel1, ivec2(key_e, 0), 0).x > 0.;
    bool qDown = texelFetch(iChannel1, ivec2(key_q, 0), 0).x > 0.;
    bool sDown = texelFetch(iChannel1, ivec2(key_s, 0), 0).x > 0.;
    bool wDown = texelFetch(iChannel1, ivec2(key_w, 0), 0).x > 0.;
    bool leftDown  = texelFetch(iChannel1, ivec2(key_left , 0), 0).x > 0.;
    bool upDown    = texelFetch(iChannel1, ivec2(key_up   , 0), 0).x > 0.;
    bool rightDown = texelFetch(iChannel1, ivec2(key_right, 0), 0).x > 0.;
    bool downDown  = texelFetch(iChannel1, ivec2(key_down , 0), 0).x > 0.;
    bool goLft = aDown || leftDown;
    bool goFwd = wDown || upDown;
    bool goRgt = dDown || rightDown;
    bool goBak = sDown || downDown;
    bool camKeyDown = goLft || goFwd || goRgt || goBak || eDown || qDown;

    // read selection
    ivec2 selection  = ivec2(texelFetch(iChannel0, ivec2(GROUP_MOUSE << pxl, 1 << pxl), 0).xy);
    bool  isSelected = (selection.x == 1);
    int   selectedId = selection.y;
    
    // read camera
    vec3 lookat = texelFetch(iChannel0, ivec2(GROUP_CAM << pxl, 0 << pxl), 0).xyz;
    vec4 adli   = texelFetch(iChannel0, ivec2(GROUP_CAM << pxl, 1 << pxl), 0); // (azimuth, declination, look-dist, image-dist)
    
    // read points
    vec3 p2[NUM_POINTS]; // 2d points in screen coords z=distance to image plane
    vec4 p3[NUM_POINTS]; // 3d points w=radius
    for (int i=0; i<NUM_POINTS; i++) {
        p2[i] = texelFetch(iChannel0, ivec2(GROUP_POINT2 << pxl, i << pxl), 0).xyz;
        p3[i] = texelFetch(iChannel0, ivec2(GROUP_POINT3 << pxl, i << pxl), 0);
    }

    //----------------------
    
    // set/reset on frame 0
    if (iFrame == 0) {
        mouseDown     = false;
        mouseClicked  = false;
        mouseReleased = false;
        mouseDelta    = vec2(0);
        
        selection     = ivec2(0);
        isSelected    = false;
        selectedId    = 0;
        
        lookat        = initialLookAt;
        adli          = initialCamADLI;
        
        for (int i = 0; i < NUM_POINTS; i++) p3[i] = EXAMPLE[i];
    }
    
    //----------------------

    // process mouse actions
    if (mouseClicked && !isSelected) {
        // find clicked point
        int   mi = -1;
        float md = inf;
        for (int i=0; i<NUM_POINTS; i++) {
            float d = distance(mouseScreen.xy, p2[i].xy);
            if (d < min(POINT_SIZE, md)) { md = d; mi = i; }
        }
        isSelected = (mi >= 0);
        selectedId = isSelected ? mi : -1;
    } else if (mouseReleased) {
        isSelected = false;
        selectedId = 0;
    }

    // update camera
    bool cameraMoved = mouseDown && !isSelected || aDown; // rotate camera if a point isn't being dragged
    bool pointMoved = isSelected;

    if (cameraMoved) {
        adli.xy += 2. * mouseDelta.xy;
        if (adli.x <  0.) adli.x += TAU;
        if (adli.x > TAU) adli.x -= TAU;
        adli.y = clamp(adli.y, 0.01, PI-0.01);
    }

    // calculate camera params
    vec3 ro = lookat + adli.z * normalize(vec3(
        sin(adli.y)*cos(adli.x), 
        cos(adli.y),
        sin(adli.y)*sin(adli.x))); 

    // camera basis
    vec3 lookdir = normalize(lookat - ro);
    vec3 ww = adli.w * lookdir;
    vec3 uu = normalize( cross( ww, vec3( 0.0, 1.0, 0.0 ) ) );
    vec3 vv = normalize( cross( uu, ww ) );

    vec3 wwcenter = ro + ww;

    if (camKeyDown) {
        if (goLft) lookat -=  uu * 0.1 / max(4., iFrameRate);
        if (goRgt) lookat +=  uu * 0.1 / max(4., iFrameRate);
        if (goFwd) adli.z *= (1. - 0.2 / max(4., iFrameRate)); // lookat += ww * 0.1 / max(4., iFrameRate);
        if (goBak) adli.z *= (1. + 0.2 / max(4., iFrameRate)); // lookat -= ww * 0.1 / max(4., iFrameRate);
        if (eDown) lookat -=  vv * 0.1 / max(4., iFrameRate);
        if (qDown) lookat +=  vv * 0.1 / max(4., iFrameRate);
    
        // re-calculate camera params
        ro = lookat + adli.z * normalize(vec3(
            sin(adli.y)*cos(adli.x), 
            cos(adli.y),
            sin(adli.y)*sin(adli.x))); 

        // camera basis
        lookdir = normalize(lookat - ro);
        ww = adli.w * lookdir;
        uu = normalize( cross( ww, vec3( 0.0, 1.0, 0.0 ) ) );
        vv = normalize( cross( uu, ww ) );

        wwcenter = ro + ww;
    }

    if (cameraMoved || camKeyDown || iFrame == 0) {
        // update 2d points
        for (int i = 0; i < NUM_POINTS; i++) {
            vec3 d = p3[i].xyz - ro;
            vec3 pw = rayPlaneIntersect(ro, d, wwcenter, lookdir);
            vec3 rd = pw - ro;
            p2[i].xy = raydirToScreen(rd, uu, vv);
            p2[i].z = length(d);
        }
    }

    if (pointMoved) {
        // update selected 3d point
        p2[selectedId].xy += mouseDelta;
        vec3 rd = screenToRaydir(p2[selectedId].xy, uu, vv, ww);
        p3[selectedId].xyz = ro + p2[selectedId].z * normalize(rd);
    }

    //----------------------

    // write mouse & sel
    if (group == GROUP_MOUSE) {
        if (item == 0) color = mouse;
        if (item == 1) color = vec4(vec2(isSelected?1.:0., float(selectedId)), 0, 0);
    }

    // write camera
    if (group == GROUP_CAM) {
        if (item == 0) color = vec4(lookat,0);
        if (item == 1) color = adli;
    }

    // write 2d points
    if (group == GROUP_POINT2 && item < NUM_POINTS) color = vec4(p2[item], 0);

    // write 3d points
    if (group == GROUP_POINT3 && item < NUM_POINTS) color = p3[item];
}
