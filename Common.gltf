
/*

Common has data for test examples, shared constants, and utility code.
For everything related to the Roving Capsules algorithm, see the main "Image" buffer/tab.

*/

// Default example to load. See alternate examples available below (example[012]). 
// NB: hit rewind when updating this, after recompiling, because this change only takes effect on frame 0.
#define EXAMPLE example1

const float PI  = 3.1415927;
const float TAU = 2. * PI;
const float inf = intBitsToFloat( 0x7f7fffff );

const int pxl = 6;

// hit rewind when updating initial params
const vec3 initialLookAt  = vec3(0, 0, 0);
const vec4 initialCamADLI = vec4(PI/2., PI/2., 1., 5.); // ADLI = (Azimuth, Declination, Look-dist, Image-dist)

/*
For convenience, we'll store the 4 control points for a curve segment as a column-major 4x4 matrix
Remember, GLSL stores matrices as column-major, and so the array index of a matrix is the column
NOTE_COL matrices are column-major (transpose of usual math)
NOTE_CWD tricky component-wise dot products https://stackoverflow.com/a/24594497
NOTE_MMR matmul looks reversed because T(A * B) = T(B) * T(A)
*/

const mat4 bspline_to_bezier = (1./6.) * mat4(
    vec4( 1, 4, 1, 0),
    vec4( 0, 4, 2, 0),
    vec4( 0, 2, 4, 0),
    vec4( 0, 1, 4, 1)
);

const mat4 example0 = mat4(
    vec4( -1, -1, -1, 0.0 ),
    vec4( -1, -1,  1, 0.5 ),
    vec4(  1, -1,  1, 0.5 ),
    vec4(  1,  1,  1, 0.0 )
) * 0.1; // NOTE_MMR

const mat4 example1 = mat4(
    vec4( -0.75,  0.05, 0.5, 0.05 ), // use w=-0.25 for a sharp tip
    vec4( -0.25, -0.05, 0.0, 0.05 ),
    vec4(  0.25, -0.05, 0.0, 0.05 ),
    vec4(  0.75,  0.05, 0.5, 0.05 )
) * bspline_to_bezier; // NOTE_MMR

const mat4 example2 = mat4(
    // c' is collinear with c'' the middle
    // (creating problems with Frenet_Serret)
    vec4( -0.75,  0.05, 0.1, 0.02 ),
    vec4( -0.25,  0.00, 0.1, 0.02 ),
    vec4(  0.25,  0.00, 0.1, 0.02 ),
    vec4(  0.75, -0.05, 0.1, 0.02 )
) * bspline_to_bezier; // NOTE_MMR

//-----------

// bezier basis matrix
const mat4 bezier_basis = mat4(
    vec4( 1,  0,  0, 0),
    vec4(-3,  3,  0, 0),
    vec4( 3, -6,  3, 0),
    vec4(-1,  3, -3, 1)
);

const mat4 bezier_to_bspline = mat4(
    vec4(6, -7,  2, 0),
    vec4(0,  2, -1, 0),
    vec4(0, -1,  2, 0),
    vec4(0,  2, -7, 6)
);

const mat4 bspline_to_dcurve = (1./6.) * mat4(
    vec4( 1,  4, 1, 0),
    vec4(-6,  0, 6, 0),
    vec4( 0, -6, 6, 0),
    vec4( 0, -6, 0, 6)
);

//-----------

const int NUM_POINTS = 4;
const float POINT_SIZE = .05;

// function of each colum of buf A
const int GROUP_MOUSE  = 0; // row 0: mouse pos; row 1:(isSelection, selectedId)
const int GROUP_CAM    = 1; // row 0: lookat; row 1: (azimuth, declination, look-dist, image-dist)
const int GROUP_POINT2 = 2; // row x: point x pos in 2d screen coords (vec3 x,y,distance)
const int GROUP_POINT3 = 3; // row x: point x pos in 3d world  coords (vec4 x,y,z,radius)
const int GROUP_END    = 4; // last group 

const int key_shift = 16;
const int key_left  = 37;
const int key_up    = 38;
const int key_right = 39;
const int key_down  = 40;
const int key_a     = 65;
const int key_d     = 68;
const int key_e     = 69;
const int key_q     = 81;
const int key_s     = 83;
const int key_w     = 87;

//  a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y  z 
// 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90

//-----------

// from https://www.shadertoy.com/view/XllSWl
float DigitBin(const in int x) {
    return x == 0?480599.0:x==1?139810.0:x==2?476951.0:x==3?476999.0:x==4?350020.0:x==5?464711.0:x==6?464727.0:x==7?476228.0:x==8?481111.0:x==9?481095.0:0.0;
}

float PrintValue( const in vec2  fragCoord, const in vec2  vPixelCoords, const in vec2  vFontSize,
                  const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces )
{
    vec2 vStringCharCoords = ( fragCoord.xy - vPixelCoords ) / vFontSize;
    if( ( vStringCharCoords.y < 0.0 ) || ( vStringCharCoords.y >= 1.0 ) ) return 0.0;

    float fLog10Value   = log2( abs( fValue ) ) / log2( 10.0 );
    float fBiggestIndex = max( floor( fLog10Value ), 0.0 );
    float fDigitIndex   = fMaxDigits - floor( vStringCharCoords.x );
    float fCharBin      = 0.0;
    if( fDigitIndex > ( -fDecimalPlaces - 1.01 ) ) {
        if( fDigitIndex > fBiggestIndex ) {
            if( ( fValue < 0.0 ) && ( fDigitIndex < ( fBiggestIndex + 1.5 ) ) ) fCharBin = 1792.0;
        } else {
            if( fDigitIndex == -1.0 ) {
                if( fDecimalPlaces > 0.0 ) fCharBin = 2.0;
            } else {
                if( fDigitIndex < 0.0 ) fDigitIndex += 1.0;
                float fDigitValue = ( abs( fValue / ( pow( 10.0, fDigitIndex ) ) ) );
                float kFix        = 0.0001;
                fCharBin          = DigitBin( int( floor( mod( kFix + fDigitValue, 10.0 ) ) ) );
            }
        }
    }
    return floor( mod( ( fCharBin / pow( 2.0, floor( fract( vStringCharCoords.x ) * 4.0 ) + ( floor( vStringCharCoords.y * 5.0 ) * 4.0 ) ) ), 2.0 ) );
}

//-----------

// screen coords are [-aspect,+aspect] x [-1,+1]
// pixel  coords are [0,xres] x [0,yres]

vec2 screenToPixel(vec2 screen, vec2 res) { return 0.5 * (screen * res.y + res); }
vec2 pixelToScreen(vec2 pixel,  vec2 res) { return (1./res.y) * ( 2. * pixel - res ); }

vec3 screenToRaydir(vec2 screen, vec3 u, vec3 v, vec3 w) {
    return screen.x * u + screen.y * v + w;
}

vec2 raydirToScreen(vec3 rd, vec3 u, vec3 v) {
    // rd should be normalized
    return vec2(dot(rd, u), dot(rd, v));
}

//-----------

vec3 rayPlaneIntersect(vec3 o, vec3 d, vec3 p, vec3 n) {
    float t = dot(p-o, n) / dot(d, n);
    return o + t * d;
}

float sdSegment( in vec2 p, in vec2 a, in vec2 b ) {
    vec2 pa = p-a, ba = b-a;
    float h = clamp( dot(pa,ba)/dot(ba,ba), 0., 1. );
    return length( pa - ba*h );
}

float sdCircle( in vec2 p, in vec2 c, in float r ) {
    return distance(p,c) - r;
}
